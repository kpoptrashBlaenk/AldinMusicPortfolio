################ WARNING ################
#### CSV FILE DIRECTLY GOES INTO C:\ ####
#### IF NOT WANTED, CHANGE IT HERE: #####
#########################################
$global:csvPath = "C:\PowerShell Score.csv"

# Function for questions
Function AskQuestion {
    param (
        [int]$counter,
        [int]$questionNumber,
        [int]$difficulty,
        [int]$thematic,
        [int]$allMistakes,
        [string]$username
    )

    # Max questions
    $maxQuestions = $difficulty - 1

    # Next question if not max
    if ($counter -le $maxQuestions) {
        # All questions (generated by chatgpt cuz too lazy)
        switch ($thematic) {
            # Fruits and Vegetables
            1 {
                $array = @(
                    @('Which of these is a citrus fruit?', @('Apple', 'Banana', 'Orange', 'Grape'), 3),
                    @('Which vegetable is orange in color?', @('Carrot', 'Broccoli', 'Potato', 'Spinach'), 1),
                    @('Which of these is a tropical fruit?', @('Strawberry', 'Pineapple', 'Blueberry', 'Raspberry'), 2),
                    @('Which vegetable is known for its green, tree-like appearance?', @('Tomato', 'Broccoli', 'Cucumber', 'Onion'), 2),
                    @('Which fruit is known for being yellow and curved?', @('Apple', 'Grape', 'Banana', 'Orange'), 3),
                    @('Which vegetable is commonly used to make pickles?', @('Carrot', 'Cucumber', 'Lettuce', 'Tomato'), 2),
                    @('Which fruit has tiny seeds on its surface?', @('Blueberry', 'Strawberry', 'Mango', 'Kiwi'), 2),
                    @('Which vegetable is often used in salads and has a crunchy texture?', @('Lettuce', 'Cabbage', 'Celery', 'Spinach'), 1),
                    @('Which fruit is commonly eaten in slices and is known for its sweetness?', @('Pineapple', 'Apple', 'Watermelon', 'Peach'), 3),
                    @('Which vegetable is often mashed and served with gravy?', @('Potato', 'Onion', 'Carrot', 'Corn'), 1)
                )
            }
            # Pokémon
            2 {
                $array = @(
                    @('Which Pokémon is known as the Electric Mouse?', @('Bulbasaur', 'Squirtle', 'Pikachu', 'Charmander'), 3),
                    @('Which Pokémon is a Fire-type starter in the first generation?', @('Charmander', 'Bulbasaur', 'Squirtle', 'Pikachu'), 1),
                    @('Which Pokémon evolves into Raichu?', @('Jigglypuff', 'Pikachu', 'Eevee', 'Meowth'), 2),
                    @('Which Pokémon is known for saying its own name?', @('Snorlax', 'Psyduck', 'Pikachu', 'Diglett'), 3),
                    @('Which Pokémon is water-type and known for its shell?', @('Charmander', 'Squirtle', 'Bulbasaur', 'Pikachu'), 2),
                    @('Which Pokémon is grass-type and has a plant bulb on its back?', @('Bulbasaur', 'Pikachu', 'Charmander', 'Squirtle'), 1),
                    @('Which Pokémon can evolve into multiple different forms?', @('Ditto', 'Snorlax', 'Eevee', 'Psyduck'), 3),
                    @('Which Pokémon is known as the Fire Horse?', @('Rapidash', 'Ponyta', 'Arcanine', 'Flareon'), 1),
                    @('Which Pokémon is the main character in the Pokémon series?', @('Ash', 'Misty', 'Pikachu', 'Brock'), 3),
                    @('Which Pokémon has a flame on its tail?', @('Charmander', 'Bulbasaur', 'Squirtle', 'Pikachu'), 1)
                )
            }
            # Yu-Gi-Oh!
            3 {
                $array = @(
                    @('Which card is known as the King of Games?', @('Dark Magician', 'Blue-Eyes White Dragon', 'Exodia', 'Summoned Skull'), 1),
                    @('Which card is a dragon and very powerful?', @('Dark Magician', 'Blue-Eyes White Dragon', 'Red-Eyes Black Dragon', 'Dark Magician Girl'), 2),
                    @('Which card is known for its five-piece set?', @('Blue-Eyes White Dragon', 'Dark Magician', 'Exodia', 'Red-Eyes Black Dragon'), 3),
                    @("Which card is known as Yugi's main card?", @('Dark Magician', 'Blue-Eyes White Dragon', 'Exodia', 'Red-Eyes Black Dragon'), 1),
                    @("Which card is Joey’s favorite?", @('Red-Eyes Black Dragon', 'Dark Magician', 'Blue-Eyes White Dragon', 'Exodia'), 1),
                    @("Which card can destroy all opponent's monsters?", @('Mirror Force', 'Dark Hole', 'Raigeki', 'Heavy Storm'), 3),
                    @('Which card is the Winged Dragon of?', @('Ra', 'Osiris', 'Obelisk', 'Slifer'), 1),
                    @('Which card is known as the Forbidden One?', @('Blue-Eyes White Dragon', 'Dark Magician', 'Exodia', 'Red-Eyes Black Dragon'), 3),
                    @('Which card is a Trap card?', @('Monster Reborn', 'Mirror Force', 'Dark Magician', 'Blue-Eyes White Dragon'), 2),
                    @('Which card is known for its infinite attack power?', @('Blue-Eyes White Dragon', 'Exodia', 'Dark Magician', 'Obelisk the Tormentor'), 2)
                )
            }
            # First Grade Math Questions
            4 {
                $array = @(
                    @('What is 2 + 2?', @('3', '4', '5', '6'), 2),
                    @('What is 5 - 3?', @('1', '2', '3', '4'), 2),
                    @('What is 7 + 1?', @('6', '7', '8', '9'), 3),
                    @('What is 10 - 5?', @('4', '5', '6', '7'), 2),
                    @('What is 3 + 4?', @('6', '7', '8', '9'), 2),
                    @('What is 6 - 2?', @('3', '4', '5', '6'), 2),
                    @('What is 5 + 5?', @('9', '10', '11', '12'), 2),
                    @('What is 8 - 4?', @('3', '4', '5', '6'), 2),
                    @('What is 1 + 1?', @('0', '1', '2', '3'), 3),
                    @('What is 9 - 3?', @('5', '6', '7', '8'), 2)
                )
            }
        }

        # Counter for answers
        [int]$counterAnswers = 1

        # Counter for wrong answers
        [int]$wrongCounter = 3

        # Boolean if correct answer
        [boolean]$correct = $false

        # Extract array
        $question = $array[$questionNumber][0]
        $answers = $array[$questionNumber][1]
        $correctAnswer = $array[$questionNumber][2]
        
        # Ask question
        [int]$thisQuestion = $counter + 1
        Write-Output ""
        Write-Output "Question $thisQuestion of $difficulty"
        Write-Output "Question: $question"
        Write-Output "Answers:"
        foreach ($answer in $answers) {
            Write-Output "$counterAnswers. $answer"
            $counterAnswers++
        }
        Write-Output ""

        # User answers question (if too many wrongs or answer correct -> exit loop)
        while ($wrongCounter -ne 0 -and $correct -eq $false) {
            # Ask for user input
            $userAnswer = Read-Host "Your answer"

            # If answer correct
            if ($userAnswer -eq $correctAnswer) {
                $correct = $true
                Write-Output "Correct!"
                AskQuestion -counter ($counter + 1) -questionNumber (Get-Random -Minimum 0 -Maximum 9) -difficulty $difficulty -thematic $thematic -allMistakes $allMistakes -username $username
            } else {
                $wrongCounter = $wrongCounter - 1
                $allMistakes = $allMistakes + 1

                if ($wrongCounter -eq 0) {
                    Write-Output "You have no more answers left"
                    # Call Scoreboard
                    Scoreboard -counter $counter -difficulty $difficulty -allMistakes $allMistakes -username $username
                } else {
                    Write-Output "You have $wrongCounter answers left"
                }
            }
        }
    } else {
        Write-Output "Congratulations, you beat the game!"
        Scoreboard -counter $counter -difficulty $difficulty -allMistakes $allMistakes -username $username
    }

    # Not repetitively asking if play again after loop exit
    if ($counter -eq 0) {
        # Ask if play again (FOR SOME GOD FORSAKEN REASON THE READ-HOST EXECUTES BEFORE THE TABLES??????)
        [string]$again = Read-Host "Play again? (y/n). If yes, your score won't be saved."

        If ($again -eq "y") {
            PreGame
        } else {
            Write-Output "Ending Game"
        }
    }
}

# Scoreboard
Function Scoreboard {
    param (
        [int]$counter,
        [int]$difficulty,
        [int]$allMistakes,
        [string]$username
    )

    # Check if the CSV exists, if not, create with headers
    if (-Not (Test-Path $global:csvPath)) {
        "username,score" | Out-File -FilePath $csvPath
    }

    # Selfmade points calculator: Percentage percentage of questions correctly answered while taking into account difficulty and mistakes
    $points = ($counter / ($difficulty + $allMistakes + (10 - $difficulty))) * 100
    $NewLine = "{0},{1}" -f $username, $points
    $NewLine | Add-Content -Path $csvPath

    $scoreboard = Import-Csv -Path $csvPath
    # Transform score column into Integer...
    $scoreboard = $scoreboard | ForEach-Object {
        [PSCustomObject]@{
            username = [string]$_.username
            score = [int]$_.score
        }
    }
    # ...to sort it and take only top 10
    $scoreboard | Sort-Object -Property score -Descending | Select-Object -First 10
}

# Settings before game
Function PreGame {
    # Counter for questions
    [int]$counter = 0

    # Ask for username
    [string]$username = Read-Host "What is your name"

    # Ask difficulty
    try {
        [int]$difficulty = Read-Host "Choose your difficulty
1. 3 Questions
2. 6 Questions
3. 10 Questions
Your choice"
    } catch {
        Write-Host "Wrong type, try again"
        PreGame
        return
    }

    # Ask thematic, if error (because no integer) ask again
    try {
        [int]$thematic = Read-Host "Choose your thematic
1. Fruits and Vegetables
2. Pokémon
3. Yu-Gi-Oh!
4. Math
Your choice"
    } catch {
        Write-Host "Wrong type, try again"
        PreGame
        return
    }

    # If difficulty is valid
    if ($difficulty -eq 1 -or $difficulty -eq 2 -or $difficulty -eq 3) {
        # Transform difficulty into question numbers
        switch ($difficulty) {
            1 { $difficulty = 3 }
            2 { $difficulty = 6 }
            3 { $difficulty = 10 }
        }

        # If thematic is valid
        if ($thematic -eq 1 -or $thematic -eq 2 -or $thematic -eq 3 -or $thematic -eq 4) {
            # Get-random for random question
            AskQuestion -counter $counter -questionNumber (Get-Random -Minimum 0 -Maximum 9) -difficulty $difficulty -thematic $thematic -allMistakes 0 -username $username
            return
        }

        # If either is not valid, reask
        Write-Host "Wrong type, try again"
        PreGame
        return
    }
}

PreGame
